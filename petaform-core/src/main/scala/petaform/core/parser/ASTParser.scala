// !!! DO NOT MODIFY !!!
// File was automatically generated by slyce

package petaform.core.parser

// format: off

object ASTParser extends _root_.slyce.parse.Parser {
  
  override type NTRoot = _root_.petaform.core.parser.ASTParser.NonTerminal.Lines
  
  // =====| Terminals |=====
  
  sealed abstract class Terminal(final val tokName: _root_.scala.Predef.String) extends _root_.slyce.core.Token
  object Terminal {
    final case class chars(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal("chars")
                                                                                                     with _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart.Lift
    final case class dash(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal("dash")
    final case class escChar(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal("escChar")
                                                                                                       with _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart.Lift
    final case class key(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal("key")
    final case class space(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal("space")
    
    final case class `\n`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal(""""\n"""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `\"`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal(""""\""""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `${`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal(""""${"""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `.`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal(""""."""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `:`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal("""":"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `@const`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal(""""@const"""")
                                                                      with _root_.slyce.core.Token.Const
    final case class `@required`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal(""""@required"""")
                                                                         with _root_.slyce.core.Token.Const
    final case class `CFG`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal(""""CFG"""")
                                                                   with _root_.slyce.core.Token.Const
    final case class `ENV`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal(""""ENV"""")
                                                                   with _root_.slyce.core.Token.Const
    final case class `}`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.core.parser.ASTParser.Terminal(""""}"""")
                                                                 with _root_.slyce.core.Token.Const
    
    val __findRawTerminal: _root_.slyce.core.Span.Highlight => PartialFunction[_root_.scala.Predef.String, _root_.petaform.core.parser.ASTParser.Terminal] =
      span => {
        case "\n" => Terminal.`\n`(span)
        case "\"" => Terminal.`\"`(span)
        case "${" => Terminal.`${`(span)
        case "." => Terminal.`.`(span)
        case ":" => Terminal.`:`(span)
        case "@const" => Terminal.`@const`(span)
        case "@required" => Terminal.`@required`(span)
        case "CFG" => Terminal.`CFG`(span)
        case "ENV" => Terminal.`ENV`(span)
        case "}" => Terminal.`}`(span)
      }
  }
  
  // =====| Non-Terminals |=====
  
  sealed abstract class NonTerminal(final val ntName: _root_.scala.Predef.String) extends _root_.slyce.core.NonTerminal
  object NonTerminal {
    
    sealed abstract class AnonList0 extends _root_.petaform.core.parser.ASTParser.NonTerminal("AnonList0") {
      
      final def toList: _root_.scala.List[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0, stack: _root_.scala.List[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0.Lift]): _root_.scala.List[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0.Lift] =
          queue match {
            case _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._1(lift, next) => loop(next, lift :: stack)
            case _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2 => stack.reverse
          }
        
        loop(this, Nil)
      }
      
    }
    object AnonList0 {
      
      type Lift = _root_.petaform.core.parser.ASTParser.Terminal.space
      
      final case class _1(
        _1: _root_.petaform.core.parser.ASTParser.Terminal.space,
        _2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0
      
      case object _2 extends _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0
      
    }
    
    final case class AnonList1Head(
      _1: _root_.petaform.core.parser.ASTParser.NonTerminal.Line,
      _2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail,
    ) extends _root_.petaform.core.parser.ASTParser.NonTerminal("AnonList1Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail, stack: _root_.scala.List[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Head.Lift]): _root_.scala.List[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Head.Lift] =
          queue match {
            case _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList1Head {
      
      type Lift = _root_.petaform.core.parser.ASTParser.NonTerminal.Line
      
    }
    
    sealed abstract class AnonList1Tail extends _root_.petaform.core.parser.ASTParser.NonTerminal("AnonList1Tail")
    object AnonList1Tail {
      
      final case class _1(
        _1: _root_.petaform.core.parser.ASTParser.Terminal.`\n`,
        _2: _root_.petaform.core.parser.ASTParser.NonTerminal.Line,
        _3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail
      
      case object _2 extends _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail
      
    }
    
    sealed abstract class AnonList2 extends _root_.petaform.core.parser.ASTParser.NonTerminal("AnonList2") {
      
      final def toList: _root_.scala.List[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2, stack: _root_.scala.List[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2.Lift]): _root_.scala.List[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2.Lift] =
          queue match {
            case _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2._1(lift, next) => loop(next, lift :: stack)
            case _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2._2 => stack.reverse
          }
        
        loop(this, Nil)
      }
      
    }
    object AnonList2 {
      
      type Lift = _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart
      
      final case class _1(
        _1: _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart,
        _2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2
      
      case object _2 extends _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2
      
    }
    
    final case class AnonList3Head(
      _1: _root_.petaform.core.parser.ASTParser.Terminal.`.`,
      _2: _root_.petaform.core.parser.ASTParser.Terminal.key,
      _3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail,
    ) extends _root_.petaform.core.parser.ASTParser.NonTerminal("AnonList3Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail, stack: _root_.scala.List[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head.Lift]): _root_.scala.List[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head.Lift] =
          queue match {
            case _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head.Lift](this._2, loop(this._3, Nil))
      }
      
    }
    object AnonList3Head {
      
      type Lift = _root_.petaform.core.parser.ASTParser.Terminal.key
      
    }
    
    sealed abstract class AnonList3Tail extends _root_.petaform.core.parser.ASTParser.NonTerminal("AnonList3Tail")
    object AnonList3Tail {
      
      final case class _1(
        _1: _root_.petaform.core.parser.ASTParser.Terminal.`.`,
        _2: _root_.petaform.core.parser.ASTParser.Terminal.key,
        _3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail
      
      case object _2 extends _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail
      
    }
    
    sealed abstract class Interpolation extends _root_.petaform.core.parser.ASTParser.NonTerminal("Interpolation")
                                        with _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart.Lift
                                        with _root_.petaform.core.parser.ASTParser.NonTerminal.Value.Lift
    object Interpolation {
      
      final case class _1(
        _1: _root_.petaform.core.parser.ASTParser.Terminal.`${`,
        _2: _root_.petaform.core.parser.ASTParser.Terminal.`CFG`,
        _3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head,
        _4: _root_.petaform.core.parser.ASTParser.Terminal.`}`,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation
        with _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart.Lift
        with _root_.petaform.core.parser.ASTParser.NonTerminal.Value.Lift
      
      final case class _2(
        _1: _root_.petaform.core.parser.ASTParser.Terminal.`${`,
        _2: _root_.petaform.core.parser.ASTParser.Terminal.`ENV`,
        _3: _root_.petaform.core.parser.ASTParser.Terminal.`.`,
        _4: _root_.petaform.core.parser.ASTParser.Terminal.key,
        _5: _root_.petaform.core.parser.ASTParser.Terminal.`}`,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation
        with _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart.Lift
        with _root_.petaform.core.parser.ASTParser.NonTerminal.Value.Lift
      
    }
    
    sealed abstract class Line extends _root_.petaform.core.parser.ASTParser.NonTerminal("Line")
    object Line {
      
      final case class _1(
        _1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.Line
      
      final case class _2(
        _1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0,
        _2: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash,
        _3: _root_.petaform.core.parser.ASTParser.Terminal.key,
        _4: _root_.petaform.core.parser.ASTParser.Terminal.`@required`,
        _5: _root_.petaform.core.parser.ASTParser.Terminal.`:`,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.Line
      
      final case class _3(
        _1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0,
        _2: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash,
        _3: _root_.petaform.core.parser.ASTParser.Terminal.key,
        _4: _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_@const`,
        _5: _root_.petaform.core.parser.ASTParser.Terminal.`:`,
        _6: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.Line
      
      final case class _4(
        _1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0,
        _2: _root_.petaform.core.parser.ASTParser.Terminal.dash,
        _3: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.Line
      
    }
    
    final case class Lines(
      _1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Head,
      _2: _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_\n`,
    ) extends _root_.petaform.core.parser.ASTParser.NonTerminal("Lines")
    
    sealed abstract class Optional_Value extends _root_.petaform.core.parser.ASTParser.NonTerminal("Optional_Value") {
      
      final def toOption: _root_.scala.Option[_root_.petaform.core.parser.ASTParser.NonTerminal.Value] =
        this match {
          case _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value._1(lift) => _root_.scala.Some(lift)
          case _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value._2 => _root_.scala.None
        }
      
    }
    object Optional_Value {
      
      final case class _1(
        _1: _root_.petaform.core.parser.ASTParser.NonTerminal.Value,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value
      
      case object _2 extends _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value
      
    }
    
    sealed abstract class Optional_dash extends _root_.petaform.core.parser.ASTParser.NonTerminal("Optional_dash") {
      
      final def toOption: _root_.scala.Option[_root_.petaform.core.parser.ASTParser.Terminal.dash] =
        this match {
          case _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash._1(lift) => _root_.scala.Some(lift)
          case _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash._2 => _root_.scala.None
        }
      
    }
    object Optional_dash {
      
      final case class _1(
        _1: _root_.petaform.core.parser.ASTParser.Terminal.dash,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash
      
      case object _2 extends _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash
      
    }
    
    final case class String(
      _1: _root_.petaform.core.parser.ASTParser.Terminal.`\"`,
      _2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2,
      _3: _root_.petaform.core.parser.ASTParser.Terminal.`\"`,
    ) extends _root_.petaform.core.parser.ASTParser.NonTerminal("String")
      with _root_.petaform.core.parser.ASTParser.NonTerminal.Value.Lift
    
    sealed abstract class StringPart extends _root_.petaform.core.parser.ASTParser.NonTerminal("StringPart") {
      
      final def lift: _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart.Lift =
        this match {
          case _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._1(lift) => lift
          case _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._2(lift) => lift
          case _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._3(lift) => lift
        }
      
    }
    object StringPart {
      
      sealed trait Lift
      
      final case class _1(
        _1: _root_.petaform.core.parser.ASTParser.Terminal.chars,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart
      
      final case class _2(
        _1: _root_.petaform.core.parser.ASTParser.Terminal.escChar,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart
      
      final case class _3(
        _1: _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart
      
    }
    
    sealed abstract class Value extends _root_.petaform.core.parser.ASTParser.NonTerminal("Value") {
      
      final def lift: _root_.petaform.core.parser.ASTParser.NonTerminal.Value.Lift =
        this match {
          case _root_.petaform.core.parser.ASTParser.NonTerminal.Value._1(lift) => lift
          case _root_.petaform.core.parser.ASTParser.NonTerminal.Value._2(lift) => lift
        }
      
    }
    object Value {
      
      sealed trait Lift
      
      final case class _1(
        _1: _root_.petaform.core.parser.ASTParser.NonTerminal.String,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.Value
      
      final case class _2(
        _1: _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.Value
      
    }
    
    sealed abstract class `Optional_@const` extends _root_.petaform.core.parser.ASTParser.NonTerminal("`Optional_@const`") {
      
      final def toOption: _root_.scala.Option[_root_.petaform.core.parser.ASTParser.Terminal.`@const`] =
        this match {
          case _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_@const`._1(lift) => _root_.scala.Some(lift)
          case _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_@const`._2 => _root_.scala.None
        }
      
    }
    object `Optional_@const` {
      
      final case class _1(
        _1: _root_.petaform.core.parser.ASTParser.Terminal.`@const`,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_@const`
      
      case object _2 extends _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_@const`
      
    }
    
    sealed abstract class `Optional_\n` extends _root_.petaform.core.parser.ASTParser.NonTerminal("`Optional_\\n`") {
      
      final def toOption: _root_.scala.Option[_root_.petaform.core.parser.ASTParser.Terminal.`\n`] =
        this match {
          case _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_\n`._1(lift) => _root_.scala.Some(lift)
          case _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_\n`._2 => _root_.scala.None
        }
      
    }
    object `Optional_\n` {
      
      final case class _1(
        _1: _root_.petaform.core.parser.ASTParser.Terminal.`\n`,
      ) extends _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_\n`
      
      case object _2 extends _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_\n`
      
    }
    
  }
  
  // =====| Lexer |=====
  
  private lazy val lexerState0: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 0,
      yields = None,
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState53) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState53) // 'A' - 'Z'
      case 45 => _root_.scala.Some(lexerState56) // '-'
      case 32 => _root_.scala.Some(lexerState14) // ' '
      case 34 => _root_.scala.Some(lexerState2) // '\"'
      case 10 => _root_.scala.Some(lexerState48) // '\n'
    }
  
  private lazy val lexerState1: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 1,
      yields = None,
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState44) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState44) // 'A' - 'Z'
      case 36 => _root_.scala.Some(lexerState28) // '$'
      case 45 => _root_.scala.Some(lexerState40) // '-'
      case 34 => _root_.scala.Some(lexerState4) // '\"'
      case 10 => _root_.scala.Some(lexerState37) // '\n'
    }
  
  private lazy val lexerState2: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 2,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState50)),
        ),
      ),
    )
  
  private lazy val lexerState3: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 3,
      yields = None,
    ) {
      case 70 => _root_.scala.Some(lexerState55) // 'F'
    }
  
  private lazy val lexerState4: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 4,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState50)),
        ),
      ),
    )
  
  private lazy val lexerState5: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 5,
      yields = None,
    ) {
      case 114 => _root_.scala.Some(lexerState25) // 'r'
      case 99 => _root_.scala.Some(lexerState29) // 'c'
    }
  
  private lazy val lexerState6: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 6,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState49)),
        ),
      ),
    )
  
  private lazy val lexerState7: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 7,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState8: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 8,
      yields = None,
    ) {
      case 110 => _root_.scala.Some(lexerState17) // 'n'
    }
  
  private lazy val lexerState9: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 9,
      yields = None,
    ) {
      case 78 => _root_.scala.Some(lexerState12) // 'N'
    }
  
  private lazy val lexerState10: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 10,
      yields = None,
    ) {
      case 117 => _root_.scala.Some(lexerState54) // 'u'
    }
  
  private lazy val lexerState11: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 11,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.core.parser.ASTParser.Terminal.dash(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 10 => _root_.scala.Some(lexerState36) // '\n'
    }
  
  private lazy val lexerState12: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 12,
      yields = None,
    ) {
      case 86 => _root_.scala.Some(lexerState20) // 'V'
    }
  
  private lazy val lexerState13: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 13,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.core.parser.ASTParser.Terminal.dash(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState1)),
        ),
      ),
    )
  
  private lazy val lexerState14: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 14,
      yields = None,
    ) {
      case 32 => _root_.scala.Some(lexerState23) // ' '
    }
  
  private lazy val lexerState15: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 15,
      yields = None,
    ) {
      case 123 => _root_.scala.Some(lexerState33) // '{'
    }
  
  private lazy val lexerState16: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 16,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState17: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 17,
      yields = None,
    ) {
      case 115 => _root_.scala.Some(lexerState46) // 's'
    }
  
  private lazy val lexerState18: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 18,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.core.parser.ASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState18) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState18) // 'A' - 'Z'
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState18) // '0' - '9'
      case 95 => _root_.scala.Some(lexerState18) // '_'
      case 45 => _root_.scala.Some(lexerState18) // '-'
    }
  
  private lazy val lexerState19: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 19,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState20: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 20,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState58)),
        ),
      ),
    )
  
  private lazy val lexerState21: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 21,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState22: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 22,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState50)),
        ),
      ),
    )
  
  private lazy val lexerState23: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 23,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.core.parser.ASTParser.Terminal.space(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState24: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 24,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.core.parser.ASTParser.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState25: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 25,
      yields = None,
    ) {
      case 101 => _root_.scala.Some(lexerState27) // 'e'
    }
  
  private lazy val lexerState26: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 26,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState27: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 27,
      yields = None,
    ) {
      case 113 => _root_.scala.Some(lexerState10) // 'q'
    }
  
  private lazy val lexerState28: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 28,
      yields = None,
    ) {
      case 123 => _root_.scala.Some(lexerState35) // '{'
    }
  
  private lazy val lexerState29: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 29,
      yields = None,
    ) {
      case 111 => _root_.scala.Some(lexerState8) // 'o'
    }
  
  private lazy val lexerState30: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 30,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.core.parser.ASTParser.Terminal.chars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 92 => _root_.scala.None // '\\'
      case 36 => _root_.scala.None // '$'
      case 34 => _root_.scala.None // '\"'
      case _ => _root_.scala.Some(lexerState30)
    }
  
  private lazy val lexerState31: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 31,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState32: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 32,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.core.parser.ASTParser.Terminal.dash(text, span),
            ),
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => _ => _root_.petaform.core.parser.ASTParser.Terminal.`\n`(span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState33: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 33,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState49)),
        ),
      ),
    )
  
  private lazy val lexerState34: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 34,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState35: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 35,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState49)),
        ),
      ),
    )
  
  private lazy val lexerState36: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 36,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -2),
              build = span => text => _root_.petaform.core.parser.ASTParser.Terminal.dash(text, span),
            ),
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (-1, -1),
              build = span => _ => _root_.petaform.core.parser.ASTParser.Terminal.`\n`(span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState37: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 37,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState38: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 38,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 32 => _root_.scala.Some(lexerState38) // ' '
      case 9 => _root_.scala.Some(lexerState38) // '\t'
    }
  
  private lazy val lexerState39: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 39,
      yields = None,
    ) {
      case 100 => _root_.scala.Some(lexerState34) // 'd'
    }
  
  private lazy val lexerState40: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 40,
      yields = None,
    ) {
      case 32 => _root_.scala.Some(lexerState11) // ' '
      case 10 => _root_.scala.Some(lexerState36) // '\n'
    }
  
  private lazy val lexerState41: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 41,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState57)),
        ),
      ),
    )
  
  private lazy val lexerState42: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 42,
      on = _ => _root_.scala.Some(lexerState24),
      yields = None,
    )
  
  private lazy val lexerState43: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 43,
      yields = None,
    ) {
      case 101 => _root_.scala.Some(lexerState39) // 'e'
    }
  
  private lazy val lexerState44: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 44,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.core.parser.ASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState45)),
        ),
      ),
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState44) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState44) // 'A' - 'Z'
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState44) // '0' - '9'
      case 95 => _root_.scala.Some(lexerState44) // '_'
      case 45 => _root_.scala.Some(lexerState44) // '-'
    }
  
  private lazy val lexerState45: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 45,
      yields = None,
    ) {
      case 32 => _root_.scala.Some(lexerState38) // ' '
      case 9 => _root_.scala.Some(lexerState38) // '\t'
      case 58 => _root_.scala.Some(lexerState41) // ':'
      case 64 => _root_.scala.Some(lexerState5) // '@'
    }
  
  private lazy val lexerState46: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 46,
      yields = None,
    ) {
      case 116 => _root_.scala.Some(lexerState34) // 't'
    }
  
  private lazy val lexerState47: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 47,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState48: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 48,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.core.parser.ASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState49: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 49,
      yields = None,
    ) {
      case 69 => _root_.scala.Some(lexerState9) // 'E'
      case 67 => _root_.scala.Some(lexerState3) // 'C'
      case 32 => _root_.scala.Some(lexerState19) // ' '
      case 9 => _root_.scala.Some(lexerState19) // '\t'
    }
  
  private lazy val lexerState50: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 50,
      yields = None,
    ) {
      case 34 => _root_.scala.Some(lexerState7) // '\"'
      case 36 => _root_.scala.Some(lexerState52) // '$'
      case 92 => _root_.scala.Some(lexerState42) // '\\'
      case _ => _root_.scala.Some(lexerState30)
    }
  
  private lazy val lexerState51: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 51,
      yields = None,
    ) {
      case 114 => _root_.scala.Some(lexerState43) // 'r'
    }
  
  private lazy val lexerState52: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 52,
      yields = None,
    ) {
      case 123 => _root_.scala.Some(lexerState6) // '{'
    }
  
  private lazy val lexerState53: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 53,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.core.parser.ASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState45)),
        ),
      ),
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState53) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState53) // 'A' - 'Z'
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState53) // '0' - '9'
      case 95 => _root_.scala.Some(lexerState53) // '_'
      case 45 => _root_.scala.Some(lexerState53) // '-'
    }
  
  private lazy val lexerState54: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 54,
      yields = None,
    ) {
      case 105 => _root_.scala.Some(lexerState51) // 'i'
    }
  
  private lazy val lexerState55: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 55,
      yields = None,
    ) {
      case 71 => _root_.scala.Some(lexerState20) // 'G'
    }
  
  private lazy val lexerState56: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 56,
      yields = None,
    ) {
      case 32 => _root_.scala.Some(lexerState13) // ' '
      case 10 => _root_.scala.Some(lexerState32) // '\n'
    }
  
  private lazy val lexerState57: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 57,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState31), // '\t'
        10 -> _root_.scala.Some(lexerState21), // '\n'
        32 -> _root_.scala.Some(lexerState31), // ' '
        34 -> _root_.scala.Some(lexerState22), // '\"'
        36 -> _root_.scala.Some(lexerState15), // '$'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState58: _root_.slyce.parse.Lexer.State[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.core.parser.ASTParser.Terminal](
      id = 58,
      yields = None,
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState18) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState18) // 'A' - 'Z'
      case 125 => _root_.scala.Some(lexerState47) // '}'
      case 46 => _root_.scala.Some(lexerState16) // '.'
      case 32 => _root_.scala.Some(lexerState26) // ' '
      case 9 => _root_.scala.Some(lexerState26) // '\t'
    }
  
  override val lexer: _root_.slyce.parse.Lexer[_root_.petaform.core.parser.ASTParser.Terminal] =
    _root_.slyce.parse.Lexer[_root_.petaform.core.parser.ASTParser.Terminal](lexerState0)
  
  // =====| Grammar |=====
  
  lazy val grammarState0: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 0,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.space) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState4)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Head => grammarState55
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0 => grammarState45
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.Lines => grammarState56
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.Line => grammarState53
      },
    )
  
  lazy val grammarState1: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 1,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState27)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState2: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 2,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.String), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Value._1(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.String), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Value._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState3: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 3,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`.`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState4: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 4,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.space) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState4)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0 => grammarState16
      },
    )
  
  lazy val grammarState5: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 5,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.core.parser.ASTParser.Terminal.`:`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.`@required`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.core.parser.ASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Line._2(_1, _2, _3, _4, _5), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.core.parser.ASTParser.Terminal.`:`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.`@required`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.core.parser.ASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Line._2(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState6: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 6,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState19)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState7: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 7,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._3(_1), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._3(_1), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._3(_1), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState8: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 8,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.Line), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`\n`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail._1(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.Line), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`\n`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState9: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 9,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState42)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState54)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState50)
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart => grammarState9
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2 => grammarState49
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation => grammarState7
      },
    )
  
  lazy val grammarState10: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 10,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState1)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState11: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 11,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.core.parser.ASTParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.String(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.core.parser.ASTParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.String(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState12: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 12,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState37)
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail => grammarState3
      },
    )
  
  lazy val grammarState13: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 13,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState11)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState14: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 14,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState21)
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head => grammarState20
      },
    )
  
  lazy val grammarState15: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 15,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState31)
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail => grammarState36
      },
    )
  
  lazy val grammarState16: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 16,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.space), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._1(_1, _2), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.space), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._1(_1, _2), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.space), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._1(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.space), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState17: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 17,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState34)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState18: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 18,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.dash), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Line._4(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.dash), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Line._4(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState19: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 19,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_@const`._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`@const`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState35)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`@required`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState39)
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_@const` => grammarState28
      },
    )
  
  lazy val grammarState20: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 20,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState52)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState21: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 21,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState12)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState22: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 22,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.Value), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value._1(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.Value), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState23: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 23,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_\n`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Head), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState24: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 24,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.dash), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash._1(_1), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState25)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState33)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.Value => grammarState22
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation => grammarState32
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value => grammarState18
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.String => grammarState2
      },
    )
  
  lazy val grammarState25: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 25,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`CFG`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState38)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`ENV`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState26)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState26: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 26,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState10)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState27: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 27,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.core.parser.ASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.core.parser.ASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.core.parser.ASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.core.parser.ASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState28: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 28,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState51)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState29: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 29,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`\n`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_\n`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState30: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 30,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState37)
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail => grammarState36
      },
    )
  
  lazy val grammarState31: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 31,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState15)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState32: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 32,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Value._2(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Value._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState33: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 33,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState42)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState54)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState50)
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart => grammarState9
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2 => grammarState13
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation => grammarState7
      },
    )
  
  lazy val grammarState34: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 34,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState46)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState35: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 35,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`@const`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_@const`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState36: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 36,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`.`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState37: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 37,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState30)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState38: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 38,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState40)
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head => grammarState58
      },
    )
  
  lazy val grammarState39: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 39,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState5)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState40: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 40,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState59)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState41: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 41,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState17)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState42: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 42,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`CFG`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState14)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`ENV`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState41)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState43: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 43,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.space) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState4)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0 => grammarState45
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.Line => grammarState57
      },
    )
  
  lazy val grammarState44: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 44,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.core.parser.ASTParser.Terminal.`:`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_@const`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.core.parser.ASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Line._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.core.parser.ASTParser.Terminal.`:`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_@const`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.core.parser.ASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Line._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState45: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 45,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Line._1(_1), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState24)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList0), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Line._1(_1), stack)
          }
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_dash => grammarState6
      },
    )
  
  lazy val grammarState46: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 46,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.core.parser.ASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.core.parser.ASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.core.parser.ASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.core.parser.ASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.core.parser.ASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.core.parser.ASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.core.parser.ASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.core.parser.ASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState47: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 47,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.Line), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Head(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.Line), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState48: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 48,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState49: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 49,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList2._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState50: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 50,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._1(_1), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._1(_1), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._1(_1), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState51: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 51,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState25)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState33)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.Value => grammarState22
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation => grammarState32
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.Optional_Value => grammarState44
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.String => grammarState2
      },
    )
  
  lazy val grammarState52: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 52,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.core.parser.ASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.core.parser.ASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState53: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 53,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: (_: _root_.petaform.core.parser.ASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState43)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: (_: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState43)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: (_: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState43)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: (_: _root_.petaform.core.parser.ASTParser.Terminal.space) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState43)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail => grammarState47
      },
    )
  
  lazy val grammarState54: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 54,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._2(_1), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._2(_1), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._2(_1), stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.core.parser.ASTParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.StringPart._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState55: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 55,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState29)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_\n`._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.`Optional_\n` => grammarState23
      },
    )
  
  lazy val grammarState56: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 56,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Accept[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(root: _root_.petaform.core.parser.ASTParser.NonTerminal.Lines), _) :: _root_.scala.Nil => root
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState57: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 57,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: (_: _root_.petaform.core.parser.ASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState43)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: (_: _root_.petaform.core.parser.ASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState43)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: (_: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState43)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: (_: _root_.petaform.core.parser.ASTParser.Terminal.space) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState43)
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`\n`) :: _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList1Tail => grammarState8
      },
    )
  
  lazy val grammarState58: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 58,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState48)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState59: _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](
      id = 59,
      onTerm = {
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail._2, stack)
          }
        case (tok: _root_.petaform.core.parser.ASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState31)
      },
      onNT = {
        case _: _root_.petaform.core.parser.ASTParser.NonTerminal.AnonList3Tail => grammarState3
      },
    )
  
  override val grammar: _root_.slyce.parse.Grammar[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar[_root_.petaform.core.parser.ASTParser.Terminal, _root_.petaform.core.parser.ASTParser.NonTerminal, _root_.petaform.core.parser.ASTParser.NonTerminal.Lines](grammarState0)
  
}

// format: on
