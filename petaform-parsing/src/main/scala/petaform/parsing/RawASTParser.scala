// !!! DO NOT MODIFY !!!
// File was automatically generated by slyce

package petaform.parsing

// format: off

object RawASTParser extends _root_.slyce.parse.Parser {
  
  override type NTRoot = _root_.petaform.parsing.RawASTParser.NonTerminal.Lines
  
  // =====| Terminals |=====
  
  sealed abstract class Terminal(final val tokName: _root_.scala.Predef.String) extends _root_.slyce.core.Token
  object Terminal {
    final case class chars(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal("chars")
                                                                                                     with _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart.Lift
    final case class dash(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal("dash")
    final case class escChar(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal("escChar")
                                                                                                       with _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart.Lift
    final case class key(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal("key")
    final case class raw(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal("raw")
    final case class space(text: _root_.scala.Predef.String, span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal("space")
    
    final case class `\n`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""\n"""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `\"`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""\""""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `${`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""${"""")
                                                                  with _root_.slyce.core.Token.Const
    final case class `.`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""."""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `:`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal("""":"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `<<-EOF`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""<<-EOF"""")
                                                                      with _root_.slyce.core.Token.Const
    final case class `@const`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""@const"""")
                                                                      with _root_.slyce.core.Token.Const
    final case class `@required`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""@required"""")
                                                                         with _root_.slyce.core.Token.Const
    final case class `CFG`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""CFG"""")
                                                                   with _root_.slyce.core.Token.Const
    final case class `ENV`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""ENV"""")
                                                                   with _root_.slyce.core.Token.Const
    final case class `EOF`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""EOF"""")
                                                                   with _root_.slyce.core.Token.Const
    final case class `null`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""null"""")
                                                                    with _root_.slyce.core.Token.Const
                                                                    with _root_.petaform.parsing.RawASTParser.NonTerminal.Value.Lift
    final case class `|`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""|"""")
                                                                 with _root_.slyce.core.Token.Const
    final case class `}`(span: _root_.slyce.core.Span.Highlight) extends _root_.petaform.parsing.RawASTParser.Terminal(""""}"""")
                                                                 with _root_.slyce.core.Token.Const
    
    val __findRawTerminal: _root_.slyce.core.Span.Highlight => PartialFunction[_root_.scala.Predef.String, _root_.petaform.parsing.RawASTParser.Terminal] =
      span => {
        case "\n" => Terminal.`\n`(span)
        case "\"" => Terminal.`\"`(span)
        case "${" => Terminal.`${`(span)
        case "." => Terminal.`.`(span)
        case ":" => Terminal.`:`(span)
        case "<<-EOF" => Terminal.`<<-EOF`(span)
        case "@const" => Terminal.`@const`(span)
        case "@required" => Terminal.`@required`(span)
        case "CFG" => Terminal.`CFG`(span)
        case "ENV" => Terminal.`ENV`(span)
        case "EOF" => Terminal.`EOF`(span)
        case "null" => Terminal.`null`(span)
        case "|" => Terminal.`|`(span)
        case "}" => Terminal.`}`(span)
      }
  }
  
  // =====| Non-Terminals |=====
  
  sealed abstract class NonTerminal(final val ntName: _root_.scala.Predef.String) extends _root_.slyce.core.NonTerminal
  object NonTerminal {
    
    sealed abstract class AnonList0 extends _root_.petaform.parsing.RawASTParser.NonTerminal("AnonList0") {
      
      final def toList: _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0, stack: _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0.Lift]): _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0.Lift] =
          queue match {
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0._1(lift, next) => loop(next, lift :: stack)
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0._2 => stack.reverse
          }
        
        loop(this, Nil)
      }
      
    }
    object AnonList0 {
      
      type Lift = _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart,
        _2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0
      
      case object _2 extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0
      
    }
    
    sealed abstract class AnonList1 extends _root_.petaform.parsing.RawASTParser.NonTerminal("AnonList1") {
      
      final def toList: _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1, stack: _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1.Lift]): _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1.Lift] =
          queue match {
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._1(lift, next) => loop(next, lift :: stack)
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2 => stack.reverse
          }
        
        loop(this, Nil)
      }
      
    }
    object AnonList1 {
      
      type Lift = _root_.petaform.parsing.RawASTParser.Terminal.space
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.space,
        _2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1
      
      case object _2 extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1
      
    }
    
    sealed abstract class AnonList2 extends _root_.petaform.parsing.RawASTParser.NonTerminal("AnonList2") {
      
      final def toList: _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2, stack: _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2.Lift]): _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2.Lift] =
          queue match {
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2._1(lift, _, next) => loop(next, lift :: stack)
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2._2 => stack.reverse
          }
        
        loop(this, Nil)
      }
      
    }
    object AnonList2 {
      
      type Lift = _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Head
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Head,
        _2: _root_.petaform.parsing.RawASTParser.Terminal.`\n`,
        _3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2
      
      case object _2 extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2
      
    }
    
    final case class AnonList3Head(
      _1: _root_.petaform.parsing.RawASTParser.NonTerminal.Line,
      _2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail,
    ) extends _root_.petaform.parsing.RawASTParser.NonTerminal("AnonList3Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail, stack: _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Head.Lift]): _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Head.Lift] =
          queue match {
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList3Head {
      
      type Lift = _root_.petaform.parsing.RawASTParser.NonTerminal.Line
      
    }
    
    sealed abstract class AnonList3Tail extends _root_.petaform.parsing.RawASTParser.NonTerminal("AnonList3Tail")
    object AnonList3Tail {
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.`\n`,
        _2: _root_.petaform.parsing.RawASTParser.NonTerminal.Line,
        _3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail
      
      case object _2 extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail
      
    }
    
    final case class AnonList4Head(
      _1: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart,
      _2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail,
    ) extends _root_.petaform.parsing.RawASTParser.NonTerminal("AnonList4Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail, stack: _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Head.Lift]): _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Head.Lift] =
          queue match {
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail._1(lift, next) => loop(next, lift :: stack)
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Head.Lift](this._1, loop(this._2, Nil))
      }
      
    }
    object AnonList4Head {
      
      type Lift = _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart
      
    }
    
    sealed abstract class AnonList4Tail extends _root_.petaform.parsing.RawASTParser.NonTerminal("AnonList4Tail")
    object AnonList4Tail {
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart,
        _2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail
      
      case object _2 extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail
      
    }
    
    final case class AnonList5Head(
      _1: _root_.petaform.parsing.RawASTParser.Terminal.`.`,
      _2: _root_.petaform.parsing.RawASTParser.Terminal.key,
      _3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail,
    ) extends _root_.petaform.parsing.RawASTParser.NonTerminal("AnonList5Head") {
      
      final def toNonEmptyList: _root_.cats.data.NonEmptyList[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail, stack: _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head.Lift]): _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head.Lift] =
          queue match {
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._1(_, lift, next) => loop(next, lift :: stack)
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2 => stack.reverse
          }
        
        _root_.cats.data.NonEmptyList[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head.Lift](this._2, loop(this._3, Nil))
      }
      
    }
    object AnonList5Head {
      
      type Lift = _root_.petaform.parsing.RawASTParser.Terminal.key
      
    }
    
    sealed abstract class AnonList5Tail extends _root_.petaform.parsing.RawASTParser.NonTerminal("AnonList5Tail")
    object AnonList5Tail {
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.`.`,
        _2: _root_.petaform.parsing.RawASTParser.Terminal.key,
        _3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail
      
      case object _2 extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail
      
    }
    
    sealed abstract class AnonList6 extends _root_.petaform.parsing.RawASTParser.NonTerminal("AnonList6") {
      
      final def toList: _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6.Lift] = {
        @_root_.scala.annotation.tailrec
        def loop(queue: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6, stack: _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6.Lift]): _root_.scala.List[_root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6.Lift] =
          queue match {
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6._1(lift, next) => loop(next, lift :: stack)
            case _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6._2 => stack.reverse
          }
        
        loop(this, Nil)
      }
      
    }
    object AnonList6 {
      
      type Lift = _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction,
        _2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6
      
      case object _2 extends _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6
      
    }
    
    final case class EofString(
      _1: _root_.petaform.parsing.RawASTParser.Terminal.`<<-EOF`,
      _2: _root_.petaform.parsing.RawASTParser.Terminal.`\n`,
      _3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2,
      _4: _root_.petaform.parsing.RawASTParser.Terminal.`EOF`,
    ) extends _root_.petaform.parsing.RawASTParser.NonTerminal("EofString")
      with _root_.petaform.parsing.RawASTParser.NonTerminal.Value.Lift
    
    sealed abstract class Interpolation extends _root_.petaform.parsing.RawASTParser.NonTerminal("Interpolation")
                                        with _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart.Lift
                                        with _root_.petaform.parsing.RawASTParser.NonTerminal.Value.Lift
    object Interpolation {
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.`${`,
        _2: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`,
        _3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head,
        _4: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6,
        _5: _root_.petaform.parsing.RawASTParser.Terminal.`}`,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation
        with _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart.Lift
        with _root_.petaform.parsing.RawASTParser.NonTerminal.Value.Lift
      
      final case class _2(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.`${`,
        _2: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`,
        _3: _root_.petaform.parsing.RawASTParser.Terminal.`.`,
        _4: _root_.petaform.parsing.RawASTParser.Terminal.key,
        _5: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6,
        _6: _root_.petaform.parsing.RawASTParser.Terminal.`}`,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation
        with _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart.Lift
        with _root_.petaform.parsing.RawASTParser.NonTerminal.Value.Lift
      
    }
    
    final case class InterpolationFunction(
      _1: _root_.petaform.parsing.RawASTParser.Terminal.`|`,
      _2: _root_.petaform.parsing.RawASTParser.Terminal.key,
    ) extends _root_.petaform.parsing.RawASTParser.NonTerminal("InterpolationFunction") {
      
      final def lift: _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction.Lift = this._2
      
    }
    object InterpolationFunction {
      
      type Lift = _root_.petaform.parsing.RawASTParser.Terminal.key
      
    }
    
    sealed abstract class KeyOrRaw extends _root_.petaform.parsing.RawASTParser.NonTerminal("KeyOrRaw")
                                   with _root_.petaform.parsing.RawASTParser.NonTerminal.Value.Lift
    object KeyOrRaw {
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.key,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.KeyOrRaw
        with _root_.petaform.parsing.RawASTParser.NonTerminal.Value.Lift
      
      final case class _2(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.raw,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.KeyOrRaw
        with _root_.petaform.parsing.RawASTParser.NonTerminal.Value.Lift
      
    }
    
    sealed abstract class Line extends _root_.petaform.parsing.RawASTParser.NonTerminal("Line")
    object Line {
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Line
      
      final case class _2(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1,
        _2: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash,
        _3: _root_.petaform.parsing.RawASTParser.Terminal.key,
        _4: _root_.petaform.parsing.RawASTParser.Terminal.`@required`,
        _5: _root_.petaform.parsing.RawASTParser.Terminal.`:`,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Line
      
      final case class _3(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1,
        _2: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash,
        _3: _root_.petaform.parsing.RawASTParser.Terminal.key,
        _4: _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_@const`,
        _5: _root_.petaform.parsing.RawASTParser.Terminal.`:`,
        _6: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Line
      
      final case class _4(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1,
        _2: _root_.petaform.parsing.RawASTParser.Terminal.dash,
        _3: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Line
      
    }
    
    final case class Lines(
      _1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Head,
      _2: _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_\n`,
    ) extends _root_.petaform.parsing.RawASTParser.NonTerminal("Lines")
    
    sealed abstract class Optional_Value extends _root_.petaform.parsing.RawASTParser.NonTerminal("Optional_Value") {
      
      final def toOption: _root_.scala.Option[_root_.petaform.parsing.RawASTParser.NonTerminal.Value] =
        this match {
          case _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value._1(lift) => _root_.scala.Some(lift)
          case _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value._2 => _root_.scala.None
        }
      
    }
    object Optional_Value {
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.Value,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value
      
      case object _2 extends _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value
      
    }
    
    sealed abstract class Optional_dash extends _root_.petaform.parsing.RawASTParser.NonTerminal("Optional_dash") {
      
      final def toOption: _root_.scala.Option[_root_.petaform.parsing.RawASTParser.Terminal.dash] =
        this match {
          case _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash._1(lift) => _root_.scala.Some(lift)
          case _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash._2 => _root_.scala.None
        }
      
    }
    object Optional_dash {
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.dash,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash
      
      case object _2 extends _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash
      
    }
    
    final case class String(
      _1: _root_.petaform.parsing.RawASTParser.Terminal.`\"`,
      _2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0,
      _3: _root_.petaform.parsing.RawASTParser.Terminal.`\"`,
    ) extends _root_.petaform.parsing.RawASTParser.NonTerminal("String")
      with _root_.petaform.parsing.RawASTParser.NonTerminal.Value.Lift
    
    sealed abstract class StringPart extends _root_.petaform.parsing.RawASTParser.NonTerminal("StringPart") {
      
      final def lift: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart.Lift =
        this match {
          case _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._1(lift) => lift
          case _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._2(lift) => lift
          case _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._3(lift) => lift
        }
      
    }
    object StringPart {
      
      sealed trait Lift
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.chars,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart
      
      final case class _2(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.escChar,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart
      
      final case class _3(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart
      
    }
    
    sealed abstract class Value extends _root_.petaform.parsing.RawASTParser.NonTerminal("Value") {
      
      final def lift: _root_.petaform.parsing.RawASTParser.NonTerminal.Value.Lift =
        this match {
          case _root_.petaform.parsing.RawASTParser.NonTerminal.Value._1(lift) => lift
          case _root_.petaform.parsing.RawASTParser.NonTerminal.Value._2(lift) => lift
          case _root_.petaform.parsing.RawASTParser.NonTerminal.Value._3(lift) => lift
          case _root_.petaform.parsing.RawASTParser.NonTerminal.Value._4(lift) => lift
          case _root_.petaform.parsing.RawASTParser.NonTerminal.Value._5(lift) => lift
        }
      
    }
    object Value {
      
      sealed trait Lift
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.String,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Value
      
      final case class _2(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Value
      
      final case class _3(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.KeyOrRaw,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Value
      
      final case class _4(
        _1: _root_.petaform.parsing.RawASTParser.NonTerminal.EofString,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Value
      
      final case class _5(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.`null`,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.Value
      
    }
    
    sealed abstract class `Optional_@const` extends _root_.petaform.parsing.RawASTParser.NonTerminal("`Optional_@const`") {
      
      final def toOption: _root_.scala.Option[_root_.petaform.parsing.RawASTParser.Terminal.`@const`] =
        this match {
          case _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_@const`._1(lift) => _root_.scala.Some(lift)
          case _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_@const`._2 => _root_.scala.None
        }
      
    }
    object `Optional_@const` {
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.`@const`,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_@const`
      
      case object _2 extends _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_@const`
      
    }
    
    sealed abstract class `Optional_\n` extends _root_.petaform.parsing.RawASTParser.NonTerminal("`Optional_\\n`") {
      
      final def toOption: _root_.scala.Option[_root_.petaform.parsing.RawASTParser.Terminal.`\n`] =
        this match {
          case _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_\n`._1(lift) => _root_.scala.Some(lift)
          case _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_\n`._2 => _root_.scala.None
        }
      
    }
    object `Optional_\n` {
      
      final case class _1(
        _1: _root_.petaform.parsing.RawASTParser.Terminal.`\n`,
      ) extends _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_\n`
      
      case object _2 extends _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_\n`
      
    }
    
  }
  
  // =====| Lexer |=====
  
  private lazy val lexerState0: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 0,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.None, // '\t'
        10 -> _root_.scala.Some(lexerState48), // '\n'
        32 -> _root_.scala.Some(lexerState64), // ' '
        34 -> _root_.scala.Some(lexerState68), // '\"'
        35 -> _root_.scala.Some(lexerState109), // '#'
        36 -> _root_.scala.None, // '$'
        45 -> _root_.scala.Some(lexerState33), // '-'
        58 -> _root_.scala.None, // ':'
      ),
      elseOn = _root_.scala.Some(lexerState84),
      yields = None,
    )
  
  private lazy val lexerState1: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 1,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
        108 -> _root_.scala.Some(lexerState73), // 'l'
      ),
      elseOn = _root_.scala.Some(lexerState5),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState32)),
        ),
      ),
    )
  
  private lazy val lexerState2: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 2,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
        117 -> _root_.scala.Some(lexerState17), // 'u'
      ),
      elseOn = _root_.scala.Some(lexerState5),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState32)),
        ),
      ),
    )
  
  private lazy val lexerState3: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 3,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
        79 -> _root_.scala.Some(lexerState44), // 'O'
      ),
      elseOn = _root_.scala.Some(lexerState5),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState32)),
        ),
      ),
    )
  
  private lazy val lexerState4: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 4,
      yields = None,
    ) {
      case 100 => _root_.scala.Some(lexerState97) // 'd'
    }
  
  private lazy val lexerState5: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 5,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
      ),
      elseOn = _root_.scala.Some(lexerState5),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState32)),
        ),
      ),
    )
  
  private lazy val lexerState6: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 6,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState7: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 7,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState8: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 8,
      yields = None,
    ) {
      case 116 => _root_.scala.Some(lexerState97) // 't'
    }
  
  private lazy val lexerState9: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 9,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState112)),
        ),
      ),
    )
  
  private lazy val lexerState10: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 10,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState83), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState83), // ' '
        34 -> _root_.scala.None, // '\"'
        108 -> _root_.scala.Some(lexerState107), // 'l'
      ),
      elseOn = _root_.scala.Some(lexerState100),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState11: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 11,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 10 => _root_.scala.None // '\n'
      case _ => _root_.scala.Some(lexerState11)
    }
  
  private lazy val lexerState12: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 12,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
      ),
      elseOn = _root_.scala.Some(lexerState5),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState70)),
        ),
      ),
    )
  
  private lazy val lexerState13: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 13,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState83), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState83), // ' '
        34 -> _root_.scala.None, // '\"'
        60 -> _root_.scala.Some(lexerState66), // '<'
      ),
      elseOn = _root_.scala.Some(lexerState100),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState14: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 14,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.chars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 92 => _root_.scala.None // '\\'
      case 36 => _root_.scala.None // '$'
      case 10 => _root_.scala.None // '\n'
      case 70 => _root_.scala.Some(lexerState60) // 'F'
      case _ => _root_.scala.Some(lexerState45)
    }
  
  private lazy val lexerState15: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 15,
      yields = None,
    ) {
      case 105 => _root_.scala.Some(lexerState58) // 'i'
    }
  
  private lazy val lexerState16: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 16,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState83), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState83), // ' '
        34 -> _root_.scala.None, // '\"'
        69 -> _root_.scala.Some(lexerState35), // 'E'
      ),
      elseOn = _root_.scala.Some(lexerState100),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState17: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 17,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
        108 -> _root_.scala.Some(lexerState1), // 'l'
      ),
      elseOn = _root_.scala.Some(lexerState5),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState32)),
        ),
      ),
    )
  
  private lazy val lexerState18: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 18,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
      ),
      elseOn = _root_.scala.Some(lexerState43),
      yields = None,
    )
  
  private lazy val lexerState19: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 19,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 10 => _root_.scala.None // '\n'
      case _ => _root_.scala.Some(lexerState19)
    }
  
  private lazy val lexerState20: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 20,
      yields = None,
    ) {
      case 36 => _root_.scala.Some(lexerState78) // '$'
      case 92 => _root_.scala.Some(lexerState104) // '\\'
      case 34 => _root_.scala.Some(lexerState92) // '\"'
      case _ => _root_.scala.Some(lexerState67)
    }
  
  private lazy val lexerState21: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 21,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.dash(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState24)),
        ),
      ),
    )
  
  private lazy val lexerState22: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 22,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -2),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.dash(text, span),
            ),
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (-1, -1),
              build = span => _ => _root_.petaform.parsing.RawASTParser.Terminal.`\n`(span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState23: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 23,
      yields = None,
    ) {
      case 71 => _root_.scala.Some(lexerState90) // 'G'
    }
  
  private lazy val lexerState24: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 24,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.None, // '\t'
        10 -> _root_.scala.Some(lexerState7), // '\n'
        32 -> _root_.scala.None, // ' '
        34 -> _root_.scala.Some(lexerState77), // '\"'
        35 -> _root_.scala.Some(lexerState29), // '#'
        36 -> _root_.scala.Some(lexerState108), // '$'
        45 -> _root_.scala.Some(lexerState62), // '-'
        58 -> _root_.scala.None, // ':'
        60 -> _root_.scala.Some(lexerState54), // '<'
        110 -> _root_.scala.Some(lexerState2), // 'n'
      ),
      elseOn = _root_.scala.Some(lexerState5),
      yields = None,
    )
  
  private lazy val lexerState25: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 25,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState26: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 26,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState83), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState83), // ' '
        34 -> _root_.scala.None, // '\"'
        70 -> _root_.scala.Some(lexerState53), // 'F'
      ),
      elseOn = _root_.scala.Some(lexerState100),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState27: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 27,
      yields = None,
    ) {
      case 101 => _root_.scala.Some(lexerState28) // 'e'
    }
  
  private lazy val lexerState28: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 28,
      yields = None,
    ) {
      case 113 => _root_.scala.Some(lexerState74) // 'q'
    }
  
  private lazy val lexerState29: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 29,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState40), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState40), // ' '
        34 -> _root_.scala.Some(lexerState11), // '\"'
        58 -> _root_.scala.Some(lexerState11), // ':'
      ),
      elseOn = _root_.scala.Some(lexerState29),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState30: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 30,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState31: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 31,
      yields = None,
    ) {
      case 110 => _root_.scala.Some(lexerState57) // 'n'
    }
  
  private lazy val lexerState32: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 32,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState103), // '\t'
        10 -> _root_.scala.Some(lexerState86), // '\n'
        32 -> _root_.scala.Some(lexerState103), // ' '
        58 -> _root_.scala.Some(lexerState59), // ':'
        64 -> _root_.scala.Some(lexerState42), // '@'
      ),
      elseOn = _root_.scala.None,
      yields = None,
    )
  
  private lazy val lexerState33: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 33,
      yields = None,
    ) {
      case 32 => _root_.scala.Some(lexerState21) // ' '
      case 10 => _root_.scala.Some(lexerState55) // '\n'
    }
  
  private lazy val lexerState34: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 34,
      yields = None,
    ) {
      case 10 => _root_.scala.Some(lexerState52) // '\n'
      case 36 => _root_.scala.Some(lexerState47) // '$'
      case 69 => _root_.scala.Some(lexerState76) // 'E'
      case 92 => _root_.scala.Some(lexerState46) // '\\'
      case _ => _root_.scala.Some(lexerState45)
    }
  
  private lazy val lexerState35: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 35,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState83), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState83), // ' '
        34 -> _root_.scala.None, // '\"'
        79 -> _root_.scala.Some(lexerState26), // 'O'
      ),
      elseOn = _root_.scala.Some(lexerState100),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState36: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 36,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState91), // '\t'
        10 -> _root_.scala.Some(lexerState61), // '\n'
        32 -> _root_.scala.Some(lexerState91), // ' '
        34 -> _root_.scala.Some(lexerState72), // '\"'
        35 -> _root_.scala.Some(lexerState106), // '#'
        36 -> _root_.scala.Some(lexerState94), // '$'
        60 -> _root_.scala.Some(lexerState13), // '<'
        110 -> _root_.scala.Some(lexerState39), // 'n'
      ),
      elseOn = _root_.scala.Some(lexerState100),
      yields = None,
    )
  
  private lazy val lexerState37: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 37,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState38: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 38,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState39: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 39,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState83), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState83), // ' '
        34 -> _root_.scala.None, // '\"'
        117 -> _root_.scala.Some(lexerState10), // 'u'
      ),
      elseOn = _root_.scala.Some(lexerState100),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState40: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 40,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState40), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState40), // ' '
        34 -> _root_.scala.Some(lexerState11), // '\"'
        58 -> _root_.scala.Some(lexerState11), // ':'
      ),
      elseOn = _root_.scala.Some(lexerState82),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState41: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 41,
      yields = None,
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState51) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState51) // 'A' - 'Z'
      case 124 => _root_.scala.Some(lexerState30) // '|'
      case 125 => _root_.scala.Some(lexerState85) // '}'
      case 46 => _root_.scala.Some(lexerState56) // '.'
      case 32 => _root_.scala.Some(lexerState111) // ' '
      case 9 => _root_.scala.Some(lexerState111) // '\t'
    }
  
  private lazy val lexerState42: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 42,
      yields = None,
    ) {
      case 114 => _root_.scala.Some(lexerState27) // 'r'
      case 99 => _root_.scala.Some(lexerState89) // 'c'
    }
  
  private lazy val lexerState43: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 43,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
      ),
      elseOn = _root_.scala.Some(lexerState43),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState44: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 44,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
        70 -> _root_.scala.Some(lexerState12), // 'F'
      ),
      elseOn = _root_.scala.Some(lexerState5),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState32)),
        ),
      ),
    )
  
  private lazy val lexerState45: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 45,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.chars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 92 => _root_.scala.None // '\\'
      case 36 => _root_.scala.None // '$'
      case 10 => _root_.scala.None // '\n'
      case _ => _root_.scala.Some(lexerState45)
    }
  
  private lazy val lexerState46: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 46,
      on = _ => _root_.scala.Some(lexerState38),
      yields = None,
    )
  
  private lazy val lexerState47: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 47,
      yields = None,
    ) {
      case 123 => _root_.scala.Some(lexerState69) // '{'
      case 36 => _root_.scala.Some(lexerState37) // '$'
      case _ => _root_.scala.Some(lexerState95)
    }
  
  private lazy val lexerState48: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 48,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState49: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 49,
      yields = None,
    ) {
      case 78 => _root_.scala.Some(lexerState98) // 'N'
    }
  
  private lazy val lexerState50: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 50,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.space(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState51: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 51,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case c if c >= 97 && c <= 122 => _root_.scala.Some(lexerState51) // 'a' - 'z'
      case c if c >= 65 && c <= 90 => _root_.scala.Some(lexerState51) // 'A' - 'Z'
      case c if c >= 48 && c <= 57 => _root_.scala.Some(lexerState51) // '0' - '9'
      case 95 => _root_.scala.Some(lexerState51) // '_'
      case 45 => _root_.scala.Some(lexerState51) // '-'
    }
  
  private lazy val lexerState52: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 52,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState70)),
        ),
      ),
    )
  
  private lazy val lexerState53: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 53,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState70)),
        ),
      ),
    ) {
      case 34 => _root_.scala.None // '\"'
      case 10 => _root_.scala.None // '\n'
      case 32 => _root_.scala.Some(lexerState83) // ' '
      case 9 => _root_.scala.Some(lexerState83) // '\t'
      case _ => _root_.scala.Some(lexerState100)
    }
  
  private lazy val lexerState54: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 54,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
        60 -> _root_.scala.Some(lexerState101), // '<'
      ),
      elseOn = _root_.scala.Some(lexerState5),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState32)),
        ),
      ),
    )
  
  private lazy val lexerState55: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 55,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.dash(text, span),
            ),
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => _ => _root_.petaform.parsing.RawASTParser.Terminal.`\n`(span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState56: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 56,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState57: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 57,
      yields = None,
    ) {
      case 115 => _root_.scala.Some(lexerState8) // 's'
    }
  
  private lazy val lexerState58: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 58,
      yields = None,
    ) {
      case 114 => _root_.scala.Some(lexerState88) // 'r'
    }
  
  private lazy val lexerState59: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 59,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState36)),
        ),
      ),
    )
  
  private lazy val lexerState60: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 60,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    ) {
      case 92 => _root_.scala.None // '\\'
      case 36 => _root_.scala.None // '$'
      case 10 => _root_.scala.None // '\n'
      case _ => _root_.scala.Some(lexerState45)
    }
  
  private lazy val lexerState61: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 61,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState62: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 62,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.Some(lexerState22), // '\n'
        32 -> _root_.scala.Some(lexerState75), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
      ),
      elseOn = _root_.scala.Some(lexerState87),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState63: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 63,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 34 => _root_.scala.None // '\"'
      case 10 => _root_.scala.None // '\n'
      case 32 => _root_.scala.Some(lexerState83) // ' '
      case 9 => _root_.scala.Some(lexerState83) // '\t'
      case _ => _root_.scala.Some(lexerState63)
    }
  
  private lazy val lexerState64: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 64,
      yields = None,
    ) {
      case 32 => _root_.scala.Some(lexerState50) // ' '
    }
  
  private lazy val lexerState65: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 65,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 10 => _root_.scala.None // '\n'
      case 34 => _root_.scala.Some(lexerState105) // '\"'
      case 32 => _root_.scala.Some(lexerState113) // ' '
      case 9 => _root_.scala.Some(lexerState113) // '\t'
      case _ => _root_.scala.Some(lexerState65)
    }
  
  private lazy val lexerState66: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 66,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState83), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState83), // ' '
        34 -> _root_.scala.None, // '\"'
        45 -> _root_.scala.Some(lexerState16), // '-'
      ),
      elseOn = _root_.scala.Some(lexerState100),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState67: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 67,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.chars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 92 => _root_.scala.None // '\\'
      case 36 => _root_.scala.None // '$'
      case 34 => _root_.scala.None // '\"'
      case _ => _root_.scala.Some(lexerState67)
    }
  
  private lazy val lexerState68: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 68,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState20)),
        ),
      ),
    )
  
  private lazy val lexerState69: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 69,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState112)),
        ),
      ),
    )
  
  private lazy val lexerState70: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 70,
      yields = None,
    ) {
      case 10 => _root_.scala.Some(lexerState6) // '\n'
      case 32 => _root_.scala.Some(lexerState102) // ' '
      case 9 => _root_.scala.Some(lexerState102) // '\t'
    }
  
  private lazy val lexerState71: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 71,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 32 => _root_.scala.Some(lexerState71) // ' '
      case 9 => _root_.scala.Some(lexerState71) // '\t'
    }
  
  private lazy val lexerState72: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 72,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState20)),
        ),
      ),
    )
  
  private lazy val lexerState73: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 73,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
      ),
      elseOn = _root_.scala.Some(lexerState5),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState74: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 74,
      yields = None,
    ) {
      case 117 => _root_.scala.Some(lexerState15) // 'u'
    }
  
  private lazy val lexerState75: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 75,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.Some(lexerState22), // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
      ),
      elseOn = _root_.scala.Some(lexerState43),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.dash(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState76: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 76,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.chars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 92 => _root_.scala.None // '\\'
      case 36 => _root_.scala.None // '$'
      case 10 => _root_.scala.None // '\n'
      case 79 => _root_.scala.Some(lexerState14) // 'O'
      case _ => _root_.scala.Some(lexerState45)
    }
  
  private lazy val lexerState77: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 77,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState20)),
        ),
      ),
    )
  
  private lazy val lexerState78: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 78,
      yields = None,
    ) {
      case 36 => _root_.scala.Some(lexerState96) // '$'
      case 123 => _root_.scala.Some(lexerState79) // '{'
      case _ => _root_.scala.Some(lexerState99)
    }
  
  private lazy val lexerState79: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 79,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState112)),
        ),
      ),
    )
  
  private lazy val lexerState80: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 80,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 34 => _root_.scala.None // '\"'
      case 10 => _root_.scala.None // '\n'
      case 32 => _root_.scala.Some(lexerState83) // ' '
      case 9 => _root_.scala.Some(lexerState83) // '\t'
      case _ => _root_.scala.Some(lexerState100)
    }
  
  private lazy val lexerState81: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 81,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState112)),
        ),
      ),
    )
  
  private lazy val lexerState82: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 82,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState40), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState40), // ' '
        34 -> _root_.scala.Some(lexerState11), // '\"'
        58 -> _root_.scala.Some(lexerState11), // ':'
      ),
      elseOn = _root_.scala.Some(lexerState82),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState83: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 83,
      yields = None,
    ) {
      case 34 => _root_.scala.None // '\"'
      case 10 => _root_.scala.None // '\n'
      case 32 => _root_.scala.Some(lexerState83) // ' '
      case 9 => _root_.scala.Some(lexerState83) // '\t'
      case _ => _root_.scala.Some(lexerState63)
    }
  
  private lazy val lexerState84: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 84,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Push(_root_.slyce.core.Lazy(lexerState32)),
        ),
      ),
    ) {
      case 58 => _root_.scala.None // ':'
      case 34 => _root_.scala.None // '\"'
      case 32 => _root_.scala.None // ' '
      case c if c >= 9 && c <= 10 => _root_.scala.None // '\t' - '\n'
      case _ => _root_.scala.Some(lexerState84)
    }
  
  private lazy val lexerState85: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 85,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState86: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 86,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState87: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 87,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
      ),
      elseOn = _root_.scala.Some(lexerState87),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState88: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 88,
      yields = None,
    ) {
      case 101 => _root_.scala.Some(lexerState4) // 'e'
    }
  
  private lazy val lexerState89: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 89,
      yields = None,
    ) {
      case 111 => _root_.scala.Some(lexerState31) // 'o'
    }
  
  private lazy val lexerState90: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 90,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState41)),
        ),
      ),
    )
  
  private lazy val lexerState91: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 91,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 32 => _root_.scala.Some(lexerState91) // ' '
      case 9 => _root_.scala.Some(lexerState91) // '\t'
    }
  
  private lazy val lexerState92: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 92,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Pop,
        ),
      ),
    )
  
  private lazy val lexerState93: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 93,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        58 -> _root_.scala.None, // ':'
        69 -> _root_.scala.Some(lexerState3), // 'E'
      ),
      elseOn = _root_.scala.Some(lexerState5),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState32)),
        ),
      ),
    )
  
  private lazy val lexerState94: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 94,
      yields = None,
    ) {
      case 123 => _root_.scala.Some(lexerState9) // '{'
    }
  
  private lazy val lexerState95: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 95,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.chars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState96: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 96,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.escChar(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState97: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 97,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = _root_.petaform.parsing.RawASTParser.Terminal.__findRawTerminal,
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState98: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 98,
      yields = None,
    ) {
      case 86 => _root_.scala.Some(lexerState90) // 'V'
    }
  
  private lazy val lexerState99: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 99,
      on = _ => _root_.scala.None,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.chars(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState100: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 100,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 34 => _root_.scala.None // '\"'
      case 10 => _root_.scala.None // '\n'
      case 32 => _root_.scala.Some(lexerState83) // ' '
      case 9 => _root_.scala.Some(lexerState83) // '\t'
      case _ => _root_.scala.Some(lexerState100)
    }
  
  private lazy val lexerState101: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 101,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState18), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState18), // ' '
        34 -> _root_.scala.None, // '\"'
        45 -> _root_.scala.Some(lexerState93), // '-'
        58 -> _root_.scala.None, // ':'
      ),
      elseOn = _root_.scala.Some(lexerState5),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.key(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState32)),
        ),
      ),
    )
  
  private lazy val lexerState102: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 102,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.To(_root_.slyce.core.Lazy(lexerState34)),
        ),
      ),
    ) {
      case 32 => _root_.scala.Some(lexerState102) // ' '
      case 9 => _root_.scala.Some(lexerState102) // '\t'
    }
  
  private lazy val lexerState103: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 103,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 32 => _root_.scala.Some(lexerState103) // ' '
      case 9 => _root_.scala.Some(lexerState103) // '\t'
    }
  
  private lazy val lexerState104: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 104,
      on = _ => _root_.scala.Some(lexerState25),
      yields = None,
    )
  
  private lazy val lexerState105: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 105,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 10 => _root_.scala.None // '\n'
      case _ => _root_.scala.Some(lexerState105)
    }
  
  private lazy val lexerState106: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 106,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 10 => _root_.scala.None // '\n'
      case 34 => _root_.scala.Some(lexerState105) // '\"'
      case 32 => _root_.scala.Some(lexerState113) // ' '
      case 9 => _root_.scala.Some(lexerState113) // '\t'
      case _ => _root_.scala.Some(lexerState106)
    }
  
  private lazy val lexerState107: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 107,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState83), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState83), // ' '
        34 -> _root_.scala.None, // '\"'
        108 -> _root_.scala.Some(lexerState80), // 'l'
      ),
      elseOn = _root_.scala.Some(lexerState100),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
            _root_.slyce.parse.Lexer.Yields.Yield(
              span = (0, -1),
              build = span => text => _root_.petaform.parsing.RawASTParser.Terminal.raw(text, span),
            ),
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState108: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 108,
      yields = None,
    ) {
      case 123 => _root_.scala.Some(lexerState81) // '{'
    }
  
  private lazy val lexerState109: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromMap[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 109,
      on = _root_.scala.collection.immutable.Map(
        9 -> _root_.scala.Some(lexerState19), // '\t'
        10 -> _root_.scala.None, // '\n'
        32 -> _root_.scala.Some(lexerState19), // ' '
        34 -> _root_.scala.Some(lexerState19), // '\"'
        58 -> _root_.scala.Some(lexerState19), // ':'
      ),
      elseOn = _root_.scala.Some(lexerState109),
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    )
  
  private lazy val lexerState110: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 110,
      yields = None,
    ) {
      case 70 => _root_.scala.Some(lexerState23) // 'F'
    }
  
  private lazy val lexerState111: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 111,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 32 => _root_.scala.Some(lexerState111) // ' '
      case 9 => _root_.scala.Some(lexerState111) // '\t'
    }
  
  private lazy val lexerState112: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 112,
      yields = None,
    ) {
      case 32 => _root_.scala.Some(lexerState71) // ' '
      case 9 => _root_.scala.Some(lexerState71) // '\t'
      case 69 => _root_.scala.Some(lexerState49) // 'E'
      case 67 => _root_.scala.Some(lexerState110) // 'C'
    }
  
  private lazy val lexerState113: _root_.slyce.parse.Lexer.State[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer.State.fromPF[_root_.petaform.parsing.RawASTParser.Terminal](
      id = 113,
      yields = Some(
        _root_.slyce.parse.Lexer.Yields(
          yields = _root_.scala.collection.immutable.List(
          ),
          toMode = _root_.slyce.parse.Lexer.Yields.ToMode.Same,
        ),
      ),
    ) {
      case 10 => _root_.scala.None // '\n'
      case 34 => _root_.scala.Some(lexerState105) // '\"'
      case 32 => _root_.scala.Some(lexerState113) // ' '
      case 9 => _root_.scala.Some(lexerState113) // '\t'
      case _ => _root_.scala.Some(lexerState65)
    }
  
  override val lexer: _root_.slyce.parse.Lexer[_root_.petaform.parsing.RawASTParser.Terminal] =
    _root_.slyce.parse.Lexer[_root_.petaform.parsing.RawASTParser.Terminal](lexerState0)
  
  // =====| Grammar |=====
  
  lazy val grammarState0: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 0,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.space) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState99)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Lines => grammarState102
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1 => grammarState81
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Line => grammarState85
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Head => grammarState83
      },
    )
  
  lazy val grammarState1: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 1,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.KeyOrRaw), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Value._3(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.KeyOrRaw), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Value._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState2: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 2,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Line), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Head(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Line), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState3: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 3,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._1(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._1(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._1(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState4: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 4,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState15)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState5: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 5,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_6: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_5: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_6: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_5: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_6: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_5: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_6: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_5: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState6: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 6,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._1(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._1(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._1(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.chars), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState7: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 7,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState30)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState8: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 8,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`EOF`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState58)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState90)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState6)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart => grammarState42
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation => grammarState59
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2 => grammarState97
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Head => grammarState45
      },
    )
  
  lazy val grammarState9: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 9,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState63)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head => grammarState79
      },
    )
  
  lazy val grammarState10: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 10,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState27)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head => grammarState80
      },
    )
  
  lazy val grammarState11: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 11,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.EofString), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Value._4(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.EofString), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Value._4(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState12: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 12,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_6: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_5: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5, _6), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_6: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_5: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState13: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 13,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState95)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail => grammarState47
      },
    )
  
  lazy val grammarState14: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 14,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.String), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Value._1(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.String), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Value._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState15: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 15,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState16: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 16,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState95)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail => grammarState73
      },
    )
  
  lazy val grammarState17: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 17,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState51)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState18: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 18,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState74)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState60)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState19: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 19,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState46)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction => grammarState19
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6 => grammarState21
      },
    )
  
  lazy val grammarState20: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 20,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState98)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState28)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState66)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.raw) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState22)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState96)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`<<-EOF`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState94)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Value => grammarState24
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.KeyOrRaw => grammarState1
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value => grammarState52
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.String => grammarState14
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.EofString => grammarState11
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation => grammarState38
      },
    )
  
  lazy val grammarState21: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 21,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState22: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 22,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.raw), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.KeyOrRaw._2(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.raw), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.KeyOrRaw._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState23: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 23,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState7)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction => grammarState29
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6 => grammarState4
      },
    )
  
  lazy val grammarState24: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 24,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Value), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value._1(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Value), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState25: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 25,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState7)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction => grammarState29
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6 => grammarState50
      },
    )
  
  lazy val grammarState26: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 26,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.dash), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Line._4(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.dash), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Line._4(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState27: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 27,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState89)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState28: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 28,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`null`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Value._5(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`null`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Value._5(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState29: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 29,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState7)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction => grammarState29
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6 => grammarState21
      },
    )
  
  lazy val grammarState30: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 30,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`|`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction(_1, _2), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`|`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState31: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 31,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`\n`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_\n`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState32: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 32,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState25)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState33: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 33,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`EOF`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState58)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState90)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState6)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart => grammarState42
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation => grammarState59
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2 => grammarState93
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Head => grammarState45
      },
    )
  
  lazy val grammarState34: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 34,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState88)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState35: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 35,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState30)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState36: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 36,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.space) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState99)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Line => grammarState55
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1 => grammarState81
      },
    )
  
  lazy val grammarState37: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 37,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.`EOF`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`\n`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`<<-EOF`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.EofString(_1, _2, _3, _4), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.`EOF`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`\n`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`<<-EOF`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.EofString(_1, _2, _3, _4), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState38: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 38,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Value._2(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Value._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState39: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 39,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState49)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState40: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 40,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`@const`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_@const`._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState41: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 41,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState98)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`null`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState28)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState66)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.raw) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState22)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: (_: _root_.petaform.parsing.RawASTParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.dash), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash._1(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: (_: _root_.petaform.parsing.RawASTParser.Terminal.`@const`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.dash), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash._1(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: (_: _root_.petaform.parsing.RawASTParser.Terminal.`@required`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.dash), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash._1(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: (_: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState96)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`<<-EOF`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState94)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Value => grammarState24
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.KeyOrRaw => grammarState1
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value => grammarState26
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.String => grammarState14
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.EofString => grammarState11
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation => grammarState38
      },
    )
  
  lazy val grammarState42: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 42,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState58)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState90)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState6)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart => grammarState77
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail => grammarState65
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation => grammarState59
      },
    )
  
  lazy val grammarState43: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 43,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState70)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState44: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 44,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.Line), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`\n`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail._1(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.Line), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`\n`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState45: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 45,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState8)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState46: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 46,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState30)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState47: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 47,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`.`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._1(_1, _2, _3), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`.`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState48: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 48,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState87)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState49: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 49,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState35)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction => grammarState56
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6 => grammarState17
      },
    )
  
  lazy val grammarState50: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 50,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState5)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState51: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 51,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_6: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_5: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_6: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_5: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_6: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_5: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5, _6), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_6: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_5: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.`.`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._2(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState52: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 52,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`:`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_@const`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Line._3(_1, _2, _3, _4, _5, _6), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_6: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_Value), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`:`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_@const`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Line._3(_1, _2, _3, _4, _5, _6), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState53: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 53,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState46)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction => grammarState19
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6 => grammarState69
      },
    )
  
  lazy val grammarState54: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 54,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState55: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 55,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: (_: _root_.petaform.parsing.RawASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState36)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: (_: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState36)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: (_: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState36)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: (_: _root_.petaform.parsing.RawASTParser.Terminal.space) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState36)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail => grammarState44
      },
    )
  
  lazy val grammarState56: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 56,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState35)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction => grammarState56
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6 => grammarState21
      },
    )
  
  lazy val grammarState57: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 57,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4, _5), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState58: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 58,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState9)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState71)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState59: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 59,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._3(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._3(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._3(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState60: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 60,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState32)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState61: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 61,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState57)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState62: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 62,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState63: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 63,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState16)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState64: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 64,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4, _5), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`}`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_4: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`${`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation._1(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState65: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 65,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Head(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState66: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 66,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState18)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState86)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState3)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart => grammarState104
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0 => grammarState34
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation => grammarState75
      },
    )
  
  lazy val grammarState67: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 67,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState100)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState68: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 68,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState103)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState69: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 69,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState12)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState70: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 70,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState53)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState71: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 71,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState39)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState72: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 72,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`:`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.`@required`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Line._2(_1, _2, _3, _4, _5), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_5: _root_.petaform.parsing.RawASTParser.Terminal.`:`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_4: _root_.petaform.parsing.RawASTParser.Terminal.`@required`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Line._2(_1, _2, _3, _4, _5), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState73: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 73,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`.`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head(_1, _2, _3), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.key), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`.`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState74: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 74,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState48)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Head => grammarState23
      },
    )
  
  lazy val grammarState75: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 75,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._3(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._3(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._3(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._3(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState76: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 76,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState64)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState77: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 77,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState58)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState90)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState6)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart => grammarState77
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Tail => grammarState62
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation => grammarState59
      },
    )
  
  lazy val grammarState78: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 78,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState72)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState79: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 79,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState35)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction => grammarState56
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6 => grammarState76
      },
    )
  
  lazy val grammarState80: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 80,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState46)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.InterpolationFunction => grammarState19
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList6 => grammarState61
      },
    )
  
  lazy val grammarState81: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 81,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Line._1(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState41)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Line._1(_1), stack)
          }
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Optional_dash => grammarState68
      },
    )
  
  lazy val grammarState82: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 82,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_\n`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Head), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState83: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 83,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState31)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_\n`._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_\n` => grammarState82
      },
    )
  
  lazy val grammarState84: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 84,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState20)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState85: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 85,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: (_: _root_.petaform.parsing.RawASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState36)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: (_: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState36)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: (_: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState36)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: (_: _root_.petaform.parsing.RawASTParser.Terminal.space) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState36)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail._2, stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList3Tail => grammarState2
      },
    )
  
  lazy val grammarState86: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 86,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._2(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._2(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._2(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState87: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 87,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState92)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail => grammarState73
      },
    )
  
  lazy val grammarState88: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 88,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.String(_1, _2, _3), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_3: _root_.petaform.parsing.RawASTParser.Terminal.`\"`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.`\"`), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.String(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState89: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 89,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState67)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail => grammarState73
      },
    )
  
  lazy val grammarState90: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 90,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._2(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._2(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._2(_1), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.escChar), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart._2(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState91: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 91,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState92)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail => grammarState47
      },
    )
  
  lazy val grammarState92: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 92,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState91)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState93: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 93,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`EOF`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState37)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState94: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 94,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState33)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState95: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 95,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState13)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState96: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 96,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.key), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.KeyOrRaw._1(_1), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.key), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.KeyOrRaw._1(_1), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState97: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 97,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`EOF`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_3: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_2: _root_.petaform.parsing.RawASTParser.Terminal.`\n`), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_1: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList4Head), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList2._1(_1, _2, _3), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState98: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 98,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`CFG`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState10)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`ENV`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState43)
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState99: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 99,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.space) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState99)
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._2, stack)
          }
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1 => grammarState101
      },
    )
  
  lazy val grammarState100: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 100,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`}`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`|`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`.`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState67)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList5Tail => grammarState47
      },
    )
  
  lazy val grammarState101: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 101,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.dash) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.space), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._1(_1, _2), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.key) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.space), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._1(_1, _2), stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\n`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.space), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._1(_1, _2), stack)
          }
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              _,
              _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(_2: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1), _) ::
                _root_.slyce.parse.Grammar.StackElement(_root_.scala.Left(_1: _root_.petaform.parsing.RawASTParser.Terminal.space), toState) ::
                stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList1._1(_1, _2), stack)
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState102: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 102,
      onTerm = {
        case _root_.scala.Nil =>
          _root_.slyce.parse.Grammar.State.Action.Accept[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case _root_.slyce.parse.Grammar.StackElement(_root_.scala.Right(root: _root_.petaform.parsing.RawASTParser.NonTerminal.Lines), _) :: _root_.scala.Nil => root
          }
      },
      onNT = PartialFunction.empty
    )
  
  lazy val grammarState103: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 103,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`:`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_@const`._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`@const`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState40)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`@required`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState78)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.`Optional_@const` => grammarState84
      },
    )
  
  lazy val grammarState104: _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar.State[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](
      id = 104,
      onTerm = {
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`\"`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Reduce[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] {
            case (
              toState,
              stack,
            ) =>
              (toState, _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0._2, stack)
          }
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.`${`) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState18)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.escChar) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState86)
        case (tok: _root_.petaform.parsing.RawASTParser.Terminal.chars) :: _ =>
          _root_.slyce.parse.Grammar.State.Action.Shift[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState3)
      },
      onNT = {
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.StringPart => grammarState104
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.AnonList0 => grammarState54
        case _: _root_.petaform.parsing.RawASTParser.NonTerminal.Interpolation => grammarState75
      },
    )
  
  override val grammar: _root_.slyce.parse.Grammar[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines] =
    _root_.slyce.parse.Grammar[_root_.petaform.parsing.RawASTParser.Terminal, _root_.petaform.parsing.RawASTParser.NonTerminal, _root_.petaform.parsing.RawASTParser.NonTerminal.Lines](grammarState0)
  
}

// format: on
