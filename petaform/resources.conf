
db:
  local:
    providers:
      docker: ${CFG.terraform.providers.docker}
    resources:
      - base:
          type: docker_volume
          name: db-data
        requireHardDestroy: true
        config:
          name: "${CFG.appName}--db-data--${ENV.PETAFORM_ENV}"
          driver: "local"
          labels:
            - label: "application"
              value: "postgres"
            - label: "app-name"
              value: "${CFG.appName}"
            - label: "app-env"
              value: ${ENV.PETAFORM_ENV}
      - base:
          type: docker_image
          name: db-image
        config:
          name: "postgres:latest"
          keep_locally: true
      - base:
          type: docker_container
          name: db
        config:
          image: docker_image.db-image.image_id
          name: "${CFG.appName}--db--${ENV.PETAFORM_ENV}"
          env:
            - "POSTGRES_DB=${CFG.db.database}"
            - "POSTGRES_PASSWORD=${CFG.db.password}"
          ports:
            - external: ${CFG.db.port}
              internal: 5432
          labels:
            - label: "application"
              value: "postgres"
            - label: "app-name"
              value: "${CFG.appName}"
            - label: "app-env"
              value: ${ENV.PETAFORM_ENV}
          mounts:
            - target: "/var/lib/postgresql/data"
              source: docker_volume.db-data.name
              read_only: false
              type: "volume"
    outputs:
      dbVolumeName:
        value: docker_volume.db-data.name
        description: "Name of the db volume"

network:
  aws:
    providers:
      aws: ${CFG.terraform.providers.aws}
    resources:
      - base:
          type: aws_vpc
          name: vpc
        config:
          cidr_block: ${CFG.network.vpcCidr}
          tags:
            Name: "${CFG.appName}--vpc--${ENV.PETAFORM_ENV}"
      - base:
          type: aws_internet_gateway
          name: internet-gateway
        config:
          vpc_id: aws_vpc.vpc.id
          tags:
            Name: "${CFG.appName}--internet-gateway--${ENV.PETAFORM_ENV}"
      - base:
          type: aws_route_table
          name: route-table
        config:
          vpc_id: aws_vpc.vpc.id
          route:
            - cidr_block: ${CFG.network.anyIPV4}
              gateway_id: aws_internet_gateway.internet-gateway.id
            - ipv6_cidr_block: ${CFG.network.anyIPV6}
              gateway_id: aws_internet_gateway.internet-gateway.id
          tags:
            Name: "${CFG.appName}--route-table--${ENV.PETAFORM_ENV}"
      - base:
          type: aws_subnet
          name: subnet
        config:
          vpc_id: aws_vpc.vpc.id
          cidr_block: ${CFG.network.subnetCidr}
          availability_zone: ${CFG.aws.availabilityZone}
          tags:
            Name: "${CFG.appName}--subnet--${ENV.PETAFORM_ENV}"
      - base:
          type: aws_route_table_association
          name: rta
        config:
          subnet_id: aws_subnet.subnet.id
          route_table_id: aws_route_table.route-table.id
      - base:
          type: aws_security_group
          name: security-group-1
        config:
          name: "allow-web-traffic-and-ssh"
          description: "allow-web-traffic-and-ssh"
          vpc_id: aws_vpc.vpc.id
          ingress:
            - description: "HTTPS"
              from_port: ${CFG.network.ports.https}
              to_port: ${CFG.network.ports.https}
              protocol: "tcp"
              cidr_blocks:
                - ${CFG.network.anyIPV4}
            - description: "HTTP"
              from_port: ${CFG.network.ports.http}
              to_port: ${CFG.network.ports.http}
              protocol: "tcp"
              cidr_blocks:
                - ${CFG.network.anyIPV4}
            - description: "SSH"
              from_port: ${CFG.network.ports.ssh}
              to_port: ${CFG.network.ports.ssh}
              protocol: "tcp"
              cidr_blocks:
                - ${CFG.network.anyIPV4}
          egress:
            - from_port: 0
              to_port: 0
              protocol: "-1"
              cidr_blocks:
                - ${CFG.network.anyIPV4}
          tags:
            Name: "${CFG.appName}--security-group-1--${ENV.PETAFORM_ENV}"
      - base:
          type: aws_network_interface
          name: network-interface
        config:
          subnet_id: aws_subnet.subnet.id
          private_ips:
            - ${CFG.network.networkInterfacePrivateIp}
          security_groups:
            - aws_security_group.security-group-1.id
          tags:
            Name: "${CFG.appName}--network-interface--${ENV.PETAFORM_ENV}"
      - base:
          type: aws_eip
          name: eip-1
        config:
          vpc: true
          network_interface: aws_network_interface.network-interface.id
          associate_with_private_ip: ${CFG.network.networkInterfacePrivateIp}
          depends_on:
            - aws_internet_gateway.internet-gateway
            - aws_instance.web-server
          tags:
            Name: "${CFG.appName}--eip-1--${ENV.PETAFORM_ENV}"

server:
  local:
    providers:
      docker: ${CFG.terraform.providers.docker}
    resources:
      - base:
          type: docker_image
          name: server-image
        config:
          name: "${CFG.appName}:${CFG.appVersion}"
          keep_locally: true
        build:
          - cmd: export
            args:
              - "BUILD__DOCKER_TAG"
              - ${CFG.appVersion}
          - cmd: export
            args:
              - "BUILD__DOCKER_APP_NAME"
              - ${CFG.appName}
          - cmd: bash
            args:
              - build-script.sh
      - base:
          type: docker_container
          name: server
        config:
          image: docker_image.server-image.image_id
          name: "${CFG.appName}--server--${ENV.PETAFORM_ENV}"
          must_run: false
          env:
            - "APP_VERSION=v${CFG.appVersion}"
          labels:
            - label: "application"
              value: "server"
            - label: "app-name"
              value: "${CFG.appName}"
            - label: "app-env"
              value: ${ENV.PETAFORM_ENV}
  aws:
    providers:
      aws: ${CFG.terraform.providers.aws}
    resources:
      - base:
          type: aws_instance
          name: web-server
        config:
          ami: "ami-05fb0b8c1424f266b"
          instance_type: ${CFG.server.instanceType}
          availability_zone: ${CFG.aws.availabilityZone}
          key_name: "testing--${ENV.PETAFORM_ENV}"
          network_interface:
            - network_interface_id: aws_network_interface.network-interface.id
              device_index: 0
          user_data: <<-EOF
            #!/bin/bash
            sudo apt update -y
            sudo apt install apache2 -y
            sudo systemctl start apache2
            sudo bash -c 'echo Hello Morena > /var/www/html/index.html'
            EOF
          tags:
            Name: "${CFG.appName}--web-server--${ENV.PETAFORM_ENV}"
            Tmp: "abc\n${CFG.network | format}"
